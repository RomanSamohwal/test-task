{"version":3,"sources":["reportWebVitals.ts","utils/JobsId.ts","utils/ProcessesId.ts","dal/localStorage.ts","bll/thunks.ts","bll/process-reducer.ts","bll/jobs-reducer.ts","bll/find-reducer.ts","bll/app-reducer.ts","app/store.ts","components/Loader/Loader.tsx","utils/types/types.ts","utils/generatorObject.ts","components/Button/Button.tsx","components/DatailRowView/DetailRowView.tsx","components/Search/Search.tsx","fatures/search/SearchContainer.tsx","fatures/data-render/TableStyle.ts","fatures/data-render/DetailRowViewContainer.tsx","components/Table/Table.tsx","fatures/data-render/TableContainer.tsx","fatures/data-render/RenderContainer.tsx","app/AppContainer.tsx","app/App.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","jobId1","v1","processId1","processId2","initProcess","id","name","jobsCount","startTime","initJobs","processId","status","saveProcesses","state","localStorage","setItem","JSON","stringify","saveJobs","restoreProcesses","a","getItem","parse","fetchJobs","createAsyncThunk","param","dispatch","rejectWithValue","jobs","saveJob","getState","jobKey","array","forEach","j","push","fetchProcesses","processes","saveProcess","allProcesses","slice","createSlice","initialState","reducers","addProcess","action","unshift","payload","process","deleteProcess","filter","i","orderProcess","setStatus","map","p","extraReducers","builder","addCase","fulfilled","appProcesses","reducer","actions","addJobs","deleteJobs","appJobs","appFind","error","setAppStatus","appReducer","rootReducer","combineReducers","app","find","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","useAppDispatch","useDispatch","JobStatuses","Container","styled","div","Loader","React","memo","randomNameGenerator","res","random","Math","floor","String","fromCharCode","generatorJob","successed","failed","running","converterStatus","generatorProcessStatus","some","every","convertStatus","ButtonComponent","props","type","onClick","text","DetailRowView","className","style","cursor","closeTable","data","item","Search","Input","SearchComponent","placeholder","allowClear","onSearch","value","findValue","trim","toLowerCase","width","margin","enterButton","SearchContainer","findState","useSelector","onSearchJob","useCallback","findJob","includes","setRow","length","setIsSelectedRow","TableStyleContainer","DetailRowViewContainerComponent","isSelectedHandler","isSelectedRow","Table","onSort","bind","sortField","sort","onRowSelect","delete","TableContainer","useState","setSort","setSortField","onAddProcess","Date","getTime","newJobs","newJob","cloneData","concat","sortType","order","_","orderBy","selectedRow","RenderContainer","firstRender","setFirstRender","row","onGenerateJobs","key","useEffect","AppContainer","setTimeout","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.827e1f7a.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {v1} from 'uuid';\r\n\r\nexport const jobId1 = v1()\r\nexport const jobId3 = v1()\r\nexport const jobId4 = v1()\r\n","import {v1} from 'uuid';\r\n\r\nexport const processId1: String = v1();\r\nexport const processId2: String = v1();","import {jobId1} from '../utils/JobsId';\r\nimport {processId1, processId2} from '../utils/ProcessesId';\r\n\r\nlet initProcess = [\r\n    {id: processId1, name: 'Process1', jobsCount: 2, startTime: 12},\r\n    {id: processId2, name: 'Process2', jobsCount: 3, startTime: 13}\r\n]\r\n\r\nlet initJobs = [{id: jobId1, name: 'JobProc1', processId: processId1, status: 'running'},\r\n    {id: jobId1, name: 'JobProc2', processId: processId2, status: 'failed'},\r\n    {id: jobId1, name: 'JobProc3', processId: processId2, status: 'failed'}]\r\n\r\n\r\nexport const saveProcesses = (state: any) => {\r\n    localStorage.setItem('processes', JSON.stringify(state));\r\n};\r\n\r\nexport const saveJobs = (state: any) => {\r\n    localStorage.setItem('jobs', JSON.stringify(state));\r\n};\r\n\r\nexport const restoreProcesses = async () => {\r\n    if (localStorage.getItem('processes') === null) {\r\n            return initProcess\r\n    } else {\r\n        return JSON.parse(<string>localStorage.getItem('processes'))\r\n    }\r\n};\r\n\r\nexport const restoreJobs =  () => {\r\n    if (localStorage.getItem('jobs') === null) {\r\n            return initJobs\r\n    } else {\r\n        return JSON.parse(<string>localStorage.getItem('jobs'))\r\n    }\r\n};\r\n","import {createAsyncThunk} from '@reduxjs/toolkit';\r\nimport {restoreJobs, restoreProcesses, saveJobs, saveProcesses} from '../dal/localStorage';\r\n\r\nexport const fetchJobs = createAsyncThunk('jobs/fetchJobs',\r\n    async (param, {dispatch, rejectWithValue}) => {\r\n        try {\r\n            let jobs = await restoreJobs()\r\n            return {jobs}\r\n        } catch (error) {\r\n            return rejectWithValue(error)\r\n        }\r\n    })\r\n\r\nexport const saveJob = createAsyncThunk('jobs/saveJobs',\r\n    async (param, {dispatch, rejectWithValue, getState}) => {\r\n        try {\r\n            let state = getState()\r\n            // @ts-ignore\r\n            let array = []\r\n            // @ts-ignore\r\n            for (const jobKey in state.jobs) {\r\n                // @ts-ignore\r\n                state.jobs[jobKey].forEach(j => array.push(j))\r\n            }\r\n            // @ts-ignore\r\n            await saveJobs(array)\r\n\r\n        } catch (error) {\r\n            rejectWithValue(error)\r\n        }\r\n    })\r\n\r\nexport const fetchProcesses = createAsyncThunk('processes/fetchProcesses',\r\n    async (param, {dispatch, rejectWithValue, getState}) => {\r\n        try {\r\n            let processes = await restoreProcesses()\r\n            return {processes}\r\n        } catch (error) {\r\n            rejectWithValue(error)\r\n        }\r\n    })\r\n\r\nexport const saveProcess = createAsyncThunk('processes/saveProcess',\r\n    async (param, {dispatch, rejectWithValue, getState}) => {\r\n        try {\r\n            let state = getState()\r\n            // @ts-ignore\r\n            let allProcesses = state.processes\r\n            await saveProcesses(allProcesses)\r\n        } catch (error) {\r\n            rejectWithValue(error)\r\n        }\r\n    })","import {createSlice, PayloadAction} from '@reduxjs/toolkit'\r\nimport { ProcessesType, ProcessType } from '../utils/types/types';\r\n\r\nimport {fetchProcesses} from './thunks';\r\n\r\nconst initialState = [] as ProcessesType\r\n\r\nconst slice = createSlice({\r\n    name: 'processes',\r\n    initialState: initialState,\r\n    reducers: {\r\n        addProcess(state, action: PayloadAction<{ process: ProcessType, status: string }>) {\r\n            state.unshift({...action.payload.process, status: action.payload.status})\r\n        },\r\n        deleteProcess(state, action: PayloadAction<{ id: string }>) {\r\n            return state.filter(i => i.id !== action.payload.id)\r\n        },\r\n        orderProcess(state, action: PayloadAction<{ process: ProcessesType }>) {\r\n            return action.payload.process\r\n        },\r\n\r\n        setStatus(state, action: PayloadAction<{ id: string, status: string }>) {\r\n            return state.map((p) => {\r\n                    if (p.id === action.payload.id) {\r\n                        return {...p, status: action.payload.status}\r\n                    }\r\n                    return p\r\n                }\r\n            )\r\n\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(fetchProcesses.fulfilled, (state, action) => {\r\n            // @ts-ignore\r\n            return action.payload.processes\r\n        })\r\n    }\r\n})\r\n\r\nexport const appProcesses = slice.reducer;\r\nexport const {addProcess, deleteProcess, orderProcess, setStatus} = slice.actions;\r\n\r\n","import {createSlice, PayloadAction} from '@reduxjs/toolkit'\r\n\r\nimport {fetchJobs} from './thunks';\r\nimport {JobsArrayType, JobsType, JobType} from '../utils/types/types';\r\nconst initialState = {} as JobsType\r\n\r\nconst slice = createSlice({\r\n    name: 'jobs',\r\n    initialState: initialState,\r\n    reducers: {\r\n        addJobs(state, action: PayloadAction<{ id: string, jobs: JobsArrayType }>) {\r\n            state[action.payload.id] = action.payload.jobs\r\n        },\r\n        deleteJobs(state, action: PayloadAction<{ id: string }>) {\r\n            delete state[action.payload.id]\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(fetchJobs.fulfilled, (state, action) => {\r\n            action.payload?.jobs.forEach((j: JobType) => {\r\n                state[j.processId] = []\r\n            })\r\n            action.payload?.jobs.forEach((j: JobType) => {\r\n                state[j.processId].unshift(j)\r\n            })\r\n\r\n        })\r\n    }\r\n})\r\n\r\nexport const appJobs = slice.reducer;\r\nexport const {addJobs, deleteJobs} = slice.actions;\r\n\r\n\r\n","import {createSlice} from '@reduxjs/toolkit'\r\nimport {JobsArrayType} from '../utils/types/types';\r\n\r\nimport {fetchJobs} from './thunks';\r\n\r\nconst initialState = [] as JobsArrayType\r\n\r\nconst slice = createSlice({\r\n    name: 'find',\r\n    initialState: initialState,\r\n    reducers: {},\r\n    extraReducers: builder => {\r\n        builder.addCase(fetchJobs.fulfilled, (state, action) => {\r\n            return action.payload.jobs\r\n        })\r\n    }\r\n})\r\n\r\nexport const appFind = slice.reducer;\r\n\r\n\r\n\r\n","import {createSlice, PayloadAction} from '@reduxjs/toolkit';\r\n\r\nconst slice = createSlice({\r\n    name: 'app',\r\n    initialState: {\r\n        status: 'idle',\r\n        error: null,\r\n    } as InitialStateType,\r\n    reducers: {\r\n        setAppStatus(state, action: PayloadAction<{ status: RequestStatusType }>) {\r\n            state.status = action.payload.status\r\n        }\r\n    }\r\n})\r\n\r\nexport const appReducer = slice.reducer;\r\nexport const {setAppStatus} = slice.actions\r\n//types\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    status: RequestStatusType\r\n}\r\n","import {combineReducers, configureStore} from '@reduxjs/toolkit';\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appProcesses} from '../bll/process-reducer';\r\nimport {useDispatch} from 'react-redux';\r\nimport {appJobs} from '../bll/jobs-reducer';\r\nimport {appFind} from '../bll/find-reducer';\r\nimport {appReducer} from '../bll/app-reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    app: appReducer,\r\n    processes: appProcesses,\r\n    jobs: appJobs,\r\n    find: appFind\r\n})\r\n\r\nexport type RootReducerType = typeof rootReducer\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware)\r\n})\r\n\r\nexport type AppRootStateType = ReturnType<RootReducerType>\r\nexport type AppDispatchType = typeof store.dispatch\r\nexport const useAppDispatch = () => <AppDispatchType>useDispatch()\r\n","import React from 'react';\nimport {Spin} from 'antd';\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n  width: 100%; \n  min-height: 100vh; \n  display: flex; \n  align-items: center; \n  justify-content: center;\n`\nexport const Loader = React.memo(() => {\n    return <>\n        <Container>\n            <Spin/>\n        </Container>\n    </>\n})\n\n","export type ProcessesType = Array<ProcessType>;\r\nexport type ProcessType = {\r\n    id: string\r\n    name: string\r\n    startTime: number\r\n    jobsCount: number\r\n    status?: string\r\n}\r\n\r\nexport type JobsType = {\r\n    [key: string]: JobsArrayType\r\n}\r\nexport type JobsArrayType = Array<JobType>\r\nexport type JobType = {\r\n    id: string\r\n    processId: string\r\n    name: string\r\n    status: string\r\n}\r\n\r\nexport enum JobStatuses {\r\n    running = 0,\r\n    successed = 1,\r\n    failed = 2,\r\n}\r\n\r\n","import {v1} from 'uuid';\r\nimport {JobsArrayType, JobStatuses, JobType, ProcessType} from './types/types';\r\n\r\n\r\nexport const generatorProcessObject = (): ProcessType => {\r\n    const id = v1()\r\n    const name = randomNameGenerator()\r\n    const jobsCount = Math.floor(Math.random() * 10) + 1;\r\n    const startTime = new Date().getTime()\r\n    return {id, name, jobsCount, startTime}\r\n}\r\n\r\nexport const randomNameGenerator = () => {\r\n    const num = 8;\r\n    let res = '';\r\n    for (let i = 0; i < num; i++) {\r\n        const random = Math.floor(Math.random() * 27);\r\n        res += String.fromCharCode(97 + random);\r\n    }\r\n    return res;\r\n}\r\n\r\nexport const generatorJob = (processId: string): JobType => {\r\n    const id = v1()\r\n    const name = randomNameGenerator()\r\n    const number = Math.floor(Math.random() * 3);\r\n    let status: JobStatuses\r\n    switch (number) {\r\n        case 1: {\r\n            status = JobStatuses.successed\r\n            break\r\n        }\r\n        case 2: {\r\n            status = JobStatuses.failed;\r\n            break\r\n        }\r\n        default : {\r\n            status = JobStatuses.running\r\n        }\r\n    }\r\n    let convertStatus = converterStatus(status)\r\n\r\n    return {id, name, processId, status: convertStatus}\r\n}\r\n\r\nexport const generatorProcessStatus = (jobs: JobsArrayType) => {\r\n    let status: string = 'undefined status'\r\n    let running = jobs.some(j => j.status === 'running')\r\n    let successed = jobs.every(j => j.status === 'successed')\r\n    let failed = jobs.every(j => j.status === 'failed')\r\n    if (running) {\r\n        status = 'in progress'\r\n    }\r\n    if (successed) {\r\n        status = 'successed'\r\n    }\r\n    if (failed) {\r\n        status = 'failed'\r\n    }\r\n    return status\r\n}\r\n\r\nexport const converterStatus = (status: number) => {\r\n    let convertStatus: string\r\n    switch (status) {\r\n        case 1: {\r\n            convertStatus = 'successed'\r\n            break\r\n        }\r\n        case 2: {\r\n            convertStatus = 'failed'\r\n            break\r\n        }\r\n        default: {\r\n            convertStatus = 'running'\r\n        }\r\n    }\r\n    return convertStatus\r\n}","import React from 'react';\r\nimport {Button} from 'antd';\r\n\r\nexport const ButtonComponent = React.memo((props: any) => {\r\n    return <>\r\n        <Button type=\"primary\" onClick={props.onClick}>{props.text}</Button>\r\n    </>\r\n})","import React from 'react';\r\nimport {ButtonComponent} from '../Button/Button';\r\n\r\nexport const DetailRowView = React.memo((props: any) => {\r\n    return <>\r\n        <table className=\"table\" style={{cursor: \"pointer\"}}>\r\n            <thead>\r\n            <tr>\r\n                <th>ID</th>\r\n                <th>NAME</th>\r\n                <th>PROCESS ID</th>\r\n                <th>STATUS</th>\r\n                <th>\r\n                    <ButtonComponent\r\n                        onClick={() => {\r\n                            props.closeTable()\r\n                        }}\r\n                        text={'close'}/>\r\n                </th>\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n            {props.data.map((item: any) => (\r\n                <tr key={item.id}>\r\n                    <td>{item.id}</td>\r\n                    <td>{item.name}</td>\r\n                    <td>{item.processId}</td>\r\n                    <td>{item.status}</td>\r\n                </tr>\r\n            ))}\r\n            </tbody>\r\n        </table>\r\n    </>\r\n})","import React from 'react';\r\nimport {Input} from 'antd';\r\n\r\nconst {Search} = Input;\r\n\r\nexport const SearchComponent = React.memo((props: any) => {\r\n\r\n    const onSearch = (value: string) => {\r\n        let findValue = value.trim().toLowerCase()\r\n        props.onSearch(findValue)\r\n    }\r\n\r\n    return <>\r\n        <Search placeholder='find job' allowClear\r\n                onSearch={onSearch}\r\n                style={{width: 200, margin: '0 10px'}}\r\n                enterButton\r\n        />\r\n    </>\r\n})\r\n","import React, {useCallback} from 'react';\r\nimport {useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../app/store';\r\nimport {JobsArrayType} from '../../utils/types/types';\r\nimport {SearchComponent} from '../../components/Search/Search';\r\n\r\nexport const SearchContainer = React.memo((props: any) => {\r\n\r\n    let findState = useSelector<AppRootStateType, JobsArrayType>(state => state.find)\r\n\r\n    const onSearchJob = useCallback((value: string) => {\r\n        const findJob = findState.filter(i => i.name.toLowerCase().includes(value.toLowerCase()))\r\n        props.setRow(findJob)\r\n        if (findJob.length) {\r\n            props.setIsSelectedRow(true)\r\n        }\r\n    }, [findState])\r\n\r\n    return <>\r\n        <SearchComponent onSearch={onSearchJob}/>\r\n    </>\r\n})","import styled from 'styled-components';\r\n\r\nexport const TableStyleContainer = styled.div`\r\n   min-width: 100vh; \r\n   display: flex; \r\n   flex-direction: column;\r\n   align-items: center; \r\n   justifyContent: center;\r\n`\r\nexport const Container = styled.div`\r\n   margin-bottom: 10px;\r\n   margin-top: 10px;\r\n`","import React, {useCallback} from 'react';\r\nimport {DetailRowView} from '../../components/DatailRowView/DetailRowView';\r\nimport {SearchContainer} from '../search/SearchContainer';\r\nimport {Container, TableStyleContainer} from './TableStyle';\r\n\r\nexport const DetailRowViewContainerComponent = React.memo((props: any) => {\r\n\r\n    const isSelectedHandler = useCallback(() => {\r\n        props.setIsSelectedRow(false)\r\n    }, [props.isSelectedRow])\r\n\r\n    return <TableStyleContainer>\r\n        <Container>\r\n            <SearchContainer setRow={props.setRow} setIsSelectedRow={props.setIsSelectedRow}/>\r\n        </Container>\r\n        <DetailRowView closeTable={isSelectedHandler} data={props.data}/>\r\n    </TableStyleContainer>\r\n})","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport {ButtonComponent} from '../Button/Button';\r\n\r\nexport const Table = React.memo((props: any) => {\r\n        return <table className='table table-striped' style={{cursor: \"pointer\"}}>\r\n            <thead>\r\n            <tr>\r\n                <th onClick={props.onSort.bind(null, 'id')}>\r\n                    ID{' '}\r\n                    {props.sortField === \"id\" ? <small>{props.sort}</small> : null}\r\n                </th>\r\n                <th onClick={props.onSort.bind(null, 'name')}>NAME{' '}\r\n                    {props.sortField === 'name' ? <small>{props.sort}</small> : null}\r\n                </th>\r\n                <th onClick={props.onSort.bind(null, 'jobsCount')}>JOBS COUNT{' '}\r\n                    {props.sortField === 'jobsCount' ? <small>{props.sort}</small> : null}\r\n                </th>\r\n                <th onClick={props.onSort.bind(null, 'startTime')}>START TIME{' '}\r\n                    {props.sortField === 'startTime' ? <small>{props.sort}</small> : null}\r\n                </th>\r\n                <th onClick={props.onSort.bind(null, 'status')}>STATUS{' '}\r\n                    {props.sortField === 'status' ? <small>{props.sort}</small> : null}\r\n                </th>\r\n                <th></th>\r\n                <th></th>\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n            {props.data.map((item: any) => (\r\n                <tr key={item.id}>\r\n                    <td>{item.id}</td>\r\n                    <td>{item.name}</td>\r\n                    <td>{item.jobsCount}</td>\r\n                    <td>{item.startTime}</td>\r\n                    <td>{item.status}</td>\r\n                    <td>\r\n                        <ButtonComponent\r\n                            onClick={() => props.onRowSelect(item.id)}\r\n                            text={'jobs'}\r\n                        />\r\n                    </td>\r\n                    <td>\r\n                        <ButtonComponent\r\n                            onClick={() => {\r\n                                props.delete(item.id)\r\n                            }}\r\n                            text={'delete'}\r\n                        />\r\n                    </td>\r\n                </tr>\r\n            ))}\r\n            </tbody>\r\n        </table>\r\n    }\r\n)","import React, {useState} from 'react';\r\nimport {Table} from '../../components/Table/Table';\r\nimport {useSelector} from 'react-redux';\r\nimport {AppRootStateType, useAppDispatch} from '../../app/store';\r\nimport {JobsType, ProcessesType} from '../../utils/types/types';\r\nimport _ from 'lodash';\r\nimport {addProcess, deleteProcess, orderProcess} from '../../bll/process-reducer';\r\nimport {addJobs, deleteJobs} from '../../bll/jobs-reducer';\r\nimport {saveJob, saveProcess} from '../../bll/thunks';\r\nimport {generatorJob, generatorProcessObject, generatorProcessStatus} from '../../utils/generatorObject';\r\nimport {ButtonComponent} from '../../components/Button/Button';\r\nimport {Container, TableStyleContainer} from './TableStyle';\r\n\r\nexport const TableContainer = React.memo((props: any) => {\r\n\r\n    const dispatch = useAppDispatch()\r\n    let processes = useSelector<AppRootStateType, ProcessesType>(state => state.processes)\r\n\r\n    let [sort, setSort] = useState('asc')\r\n    let [sortField, setSortField] = useState('id')\r\n    let jobs = useSelector<AppRootStateType, JobsType>(state => state.jobs)\r\n\r\n    const onSort = (sortField: string) => {\r\n        const cloneData = processes.concat();\r\n        const sortType = sort === 'asc' ? 'desc' : 'asc';\r\n        const order = _.orderBy(cloneData, sortField, sortType);\r\n        dispatch(orderProcess({process: order}))\r\n        setSort(sortType)\r\n        setSortField(sortField)\r\n    }\r\n\r\n    const onRowSelect = (id: string) => {\r\n        let selectedRow = jobs[id]\r\n        props.setRow(selectedRow)\r\n        props.setIsSelectedRow(true)\r\n    }\r\n\r\n    const onDeleteProcess = (id: string) => {\r\n        dispatch(deleteProcess({id}))\r\n        dispatch(deleteJobs({id}))\r\n        dispatch(saveProcess())\r\n        dispatch(saveJob())\r\n    }\r\n\r\n    const onAddProcess = () => {\r\n        const process = generatorProcessObject()\r\n        const processId = process.id\r\n        const newJobs = []\r\n        for (let i = 0; i < process.jobsCount; i++) {\r\n            let newJob = generatorJob(processId)\r\n            newJobs.push(newJob)\r\n        }\r\n        let status = generatorProcessStatus(newJobs)\r\n        dispatch(addProcess({process, status}))\r\n        dispatch(addJobs({id: processId, jobs: newJobs}))\r\n        dispatch(saveProcess())\r\n        dispatch(saveJob())\r\n    }\r\n\r\n    return <TableStyleContainer>\r\n        <Container>\r\n            <ButtonComponent onClick={onAddProcess} text={'add process'}/>\r\n        </Container>\r\n        <Table data={processes}\r\n               onSort={onSort}\r\n               onRowSelect={onRowSelect}\r\n               addProcess={onAddProcess}\r\n               delete={onDeleteProcess}\r\n               sort={sort}\r\n               sortField={sortField}\r\n        />\r\n    </TableStyleContainer>\r\n})","import React, {useCallback, useEffect, useState} from 'react';\r\nimport {AppRootStateType, useAppDispatch} from '../../app/store';\r\nimport {useSelector} from 'react-redux';\r\nimport {JobsType} from '../../utils/types/types';\r\nimport {generatorProcessStatus} from '../../utils/generatorObject';\r\nimport {setStatus} from '../../bll/process-reducer';\r\nimport {fetchJobs, fetchProcesses} from '../../bll/thunks';\r\nimport {DetailRowViewContainerComponent} from './DetailRowViewContainer';\r\nimport {TableContainer} from './TableContainer';\r\n\r\nexport const RenderContainer = React.memo(() => {\r\n    const dispatch = useAppDispatch()\r\n\r\n    let [firstRender, setFirstRender] = useState(true)\r\n    let [row, setRow] = useState(null)\r\n    let [isSelectedRow, setIsSelectedRow] = useState(false)\r\n    let jobs = useSelector<AppRootStateType, JobsType>(state => state.jobs)\r\n\r\n    let onGenerateJobs = useCallback((jobs: JobsType) => {\r\n        for (const key in jobs) {\r\n            let status = generatorProcessStatus(jobs[key])\r\n            dispatch(setStatus({id: key, status: status}))\r\n        }\r\n    }, [jobs])\r\n\r\n    useEffect(() => {\r\n        if (firstRender) {\r\n            dispatch(fetchProcesses())\r\n            dispatch(fetchJobs())\r\n            setFirstRender(false)\r\n        }\r\n        onGenerateJobs(jobs)\r\n    }, [jobs])\r\n\r\n    return <>\r\n        {\r\n            isSelectedRow\r\n                ? <DetailRowViewContainerComponent\r\n                    setIsSelectedRow={setIsSelectedRow}\r\n                    data={row}\r\n                    setRow={setRow}/>\r\n                : <>\r\n                    <TableContainer\r\n                        setRow={setRow}\r\n                        setIsSelectedRow={setIsSelectedRow}/>\r\n                </>\r\n        }\r\n    </>\r\n})","import React, {useState} from 'react';\r\nimport {Loader} from '../components/Loader/Loader';\r\nimport {RenderContainer} from '../fatures/data-render/RenderContainer';\r\nimport {useSelector} from 'react-redux';\r\nimport {AppRootStateType, useAppDispatch} from './store';\r\nimport {setAppStatus} from '../bll/app-reducer';\r\nimport {fetchJobs, fetchProcesses} from '../bll/thunks';\r\n\r\nexport const AppContainer = React.memo(() => {\r\n\r\n    const dispatch = useAppDispatch()\r\n    let [firstRender, setFirstRender] = useState(true)\r\n    let status = useSelector<AppRootStateType>(state => state.app.status)\r\n\r\n    if (firstRender) {\r\n        dispatch(setAppStatus({status: 'loading'}))\r\n        setTimeout(() => {\r\n            dispatch(setAppStatus({status: 'succeeded'}))\r\n        }, 1000)\r\n        setFirstRender(false)\r\n    }\r\n\r\n    setTimeout(() => {\r\n        dispatch(fetchProcesses())\r\n        dispatch(fetchJobs())\r\n    }, 100000)\r\n\r\n    return <>\r\n        {status === 'loading' ? <Loader/> : <RenderContainer/>}\r\n    </>\r\n})","import React from 'react';\r\nimport {AppContainer} from './AppContainer';\r\n\r\nexport const App = React.memo(() => {\r\n    return <>\r\n        <AppContainer/>\r\n    </>\r\n})","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './app/store';\r\nimport {App} from './app/App';\r\nimport 'antd/dist/antd.css'\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}